" ============================================================================
" Vim-plug initialization
" http://fisadev.github.io/fisa-vim-config/

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" Plugins ---------------------------------------{{{

call plug#begin('~/.vim/plugged')
" Plug 'akinsho/bufferline.nvim', { 'tag': 'v3.*' }
Plug 'projekt0n/github-nvim-theme', { 'tag': 'v0.0.7' }

Plug 'epwalsh/obsidian.nvim'

Plug 'folke/which-key.nvim'
Plug 'mrjones2014/legendary.nvim'
Plug 'stevearc/dressing.nvim'

Plug 'ray-x/sad.nvim'
Plug 'ray-x/guihua.lua'

Plug 'dyng/ctrlsf.vim'

Plug 'christianchiarulli/nvcode-color-schemes.vim'

Plug 'amadeus/vim-mjml'
Plug 'smjonas/live-command.nvim',
Plug 'nvim-lua/plenary.nvim',
Plug 'MunifTanjim/nui.nvim',
Plug 'nvim-neo-tree/neo-tree.nvim', { 'branch': 'v2.x' }

Plug 'antoinemadec/FixCursorHold.nvim'
Plug 'nvim-neotest/neotest'
Plug 'haydenmeade/neotest-jest'

Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'nvim-treesitter/playground'
Plug 'stevearc/aerial.nvim'

Plug 'lewis6991/spellsitter.nvim'
" Plug 'github/copilot.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'ziontee113/syntax-tree-surfer'
Plug 'brooth/far.vim'

"Plug 'liuchengxu/vim-which-key'
Plug 'sindrets/diffview.nvim'
Plug 'kyazdani42/nvim-web-devicons'

Plug 'https://github.com/morhetz/gruvbox.git'
Plug 'ericbn/vim-solarized'
" Plug 'ulwlu/elly.vim'
Plug 'cormacrelf/vim-colors-github'
Plug 'ayu-theme/ayu-vim'

Plug 'tpope/vim-commentary'
Plug 'suy/vim-context-commentstring' " needed for vim-commentary
Plug 'meain/vim-package-info', { 'do': 'npm install' }
Plug 'haya14busa/is.vim'
Plug 'bronson/vim-visual-star-search'

Plug 'https://github.com/edkolev/tmuxline.vim.git'
Plug 'https://github.com/MarcWeber/vim-addon-mw-utils.git'
Plug 'https://github.com/vim-airline/vim-airline.git'

" git
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'
Plug 'https://github.com/airblade/vim-gitgutter.git'
Plug 'rhysd/git-messenger.vim'

" tpope classics
Plug 'https://github.com/tpope/vim-repeat.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/tpope/vim-sleuth.git'
Plug 'https://github.com/tpope/vim-unimpaired.git'

Plug 'justinmk/vim-sneak'

Plug 'https://github.com/christoomey/vim-tmux-navigator.git'

Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

Plug 'andys8/vim-elm-syntax'

Plug 'mfussenegger/nvim-dap'

Plug 'cbochs/portal.nvim'

Plug 'kevinhwang91/nvim-bqf'

Plug 'inkarkat/vim-EnhancedJumps'
Plug 'inkarkat/vim-ingo-library'

Plug 'andymass/vim-visput'

Plug 'machakann/vim-highlightedyank'
Plug '/opt/homebrew/opt/fzf'
Plug 'junegunn/fzf.vim'

Plug 'wellle/targets.vim'

" Scratch buffer
Plug 'mtth/scratch.vim'

Plug 'janko/vim-test'

Plug 'nvim-treesitter/nvim-treesitter'
Plug 'stevearc/oil.nvim'
Plug 'jxnblk/vim-mdx-js'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-symbols.nvim'

Plug 'kevinhwang91/promise-async'
Plug 'kevinhwang91/nvim-ufo'
Plug 'luukvbaal/statuscol.nvim'

Plug 'chentoast/marks.nvim'

Plug 'jackMort/ChatGPT.nvim'

Plug 'mg979/vim-visual-multi', {'branch': 'master'}

Plug 'nvim-pack/nvim-spectre'
Plug 'MagicDuck/grug-far.nvim'

Plug 'gbprod/substitute.nvim'

Plug 'zbirenbaum/copilot.lua'
Plug 'CopilotC-Nvim/CopilotChat.nvim', { 'branch': 'canary' }

Plug 'MeanderingProgrammer/render-markdown.nvim'
Plug 'yetone/avante.nvim'

Plug 'luckasRanarison/tailwind-tools.nvim'

Plug 'ziontee113/icon-picker.nvim'

call plug#end()

set signcolumn=number
let g:coc_global_extensions = [
\ 'coc-json',
\ 'coc-tsserver',
\ 'coc-eslint',
\ 'coc-html',
\ 'coc-css',
\ 'coc-yaml',
\ 'coc-highlight',
\ 'coc-vimlsp',
\ 'coc-snippets',
\ 'coc-react-refactor',
\ 'coc-yank',
\ 'coc-lists',
\ 'coc-fzf-preview',
\ 'coc-protobuf',
\ 'coc-spell-checker',
\ 'coc-sh',
\ '@yaegassy/coc-tailwindcss3',
\ ]

nnoremap <silent> <leader> :WhichKey ' '<CR>
" ============================================================================
" Install plugins the first time vim runs

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

" ============================================================================

lua <<EOF
require('basic-options');
EOF

" Mappings ----------------------------------------{{{
" cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" let g:airline_inactive_collapse=1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_extensions = ['tmuxline', 'quickfix', 'coc']
let g:airline_section_c='%<%#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#%#__accent_bold#%{airline#util#wrap(airline#extensions#coc#get_status(),0)}%#__restore__#%#__accent_bold#%#__restore__#'
" show me the git branch
let g:airline#extensions#branch#enabled=1

" Save with treesitter reset
nnoremap <silent> <S-s> :write \| edit \| TSBufEnable highlight<CR>
" <Command-S> is bound to <M--> in alacritty config
nnoremap <silent> <M--> :write \| edit \| TSBufEnable highlight<CR>

" use system clipboard
set clipboard+=unnamedplus

noremap <S-h> ^
noremap <S-l> $
noremap <C-6> :e#

let $FZF_DEFAULT_COMMAND = 'fd -H -E .git'
" let $FZF_DEFAULT_COMMAND = 'fd -H -E .git --type file'
nnoremap <silent> <leader>b :Buffers<cr>
nnoremap <silent> <leader>/ :BLines<cr>
nnoremap <silent> <leader>h :History<cr>
nnoremap <silent> <leader>H :Helptags<cr>
" nnoremap <leader>: :Commands<cr>

let g:fzf_preview_command = 'bat --color=always --plain {-1}'
let g:fzf_preview_filelist_command = 'fd -H -E .git'
" https://www.reddit.com/r/vim/comments/kaedj9/implemented_fzfpreviewvim_with_gitdelta_in_vim/
let g:fzf_preview_git_status_preview_command = "git diff --color=always -- {-1}"
let g:fzf_preview_fzf_preview_window_option = 'up:60%'

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
let g:fzf_preview_window = ['up:70%', 'ctrl-/']

" nnoremap <leader>e :<C-u>CocCommand fzf-preview.DirectoryFiles<CR>
nnoremap <silent> <Leader>fp     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
nnoremap <silent> <Leader>fgs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
nnoremap <silent> <Leader>fga    :<C-u>CocCommand fzf-preview.GitActions<CR>
nnoremap <silent> <Leader>fb     :<C-u>CocCommand fzf-preview.Buffers<CR>
nnoremap <silent> <Leader>fB     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
nnoremap <silent> <Leader>fo     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
nnoremap <silent> <Leader>f<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
nnoremap <silent> <Leader>fg;    :<C-u>CocCommand fzf-preview.Changes<CR>
nnoremap <silent> <Leader>f/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
nnoremap <silent> <Leader>f*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
nnoremap <silent> <Leader>fgr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
xnoremap <silent> <Leader>fgr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
nnoremap <silent> <Leader>ft     :<C-u>CocCommand fzf-preview.BufferTags<CR>
nnoremap <silent> <Leader>fq     :<C-u>CocCommand fzf-preview.QuickFix<CR>
nnoremap <silent> <Leader>fl     :<C-u>CocCommand fzf-preview.LocationList<CR>
nnoremap <silent> <leader>gg :GFiles?<cr>

nnoremap <silent> tc :tabc<cr>

" some abbreviations
iabbrev lenght length

" default split position
set splitright
set splitbelow

noremap <silent> Q :q<cr>

" splits
noremap <silent> <leader>sh :call OpenSplit('h')<cr>
noremap <silent> <leader>sl :call OpenSplit('l')<cr>
noremap <silent> <leader>sk :call OpenSplit('k')<cr>
noremap <silent> <leader>sj :call OpenSplit('j')<cr>

" Make Y behave more like other operators.
nnoremap <silent> Y y$

" Save cursor position for reopening.
au BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif

set nospell
set ignorecase
set smartcase
set scrolljump=5                " lines to scroll when cursor leaves screen
set scrolloff=3                 " minimum lines to keep above and below cursor
set gdefault                    " the /g flag on :s substitutions
set tabstop=4

augroup filetype_git
    autocmd!
    autocmd FileType git :norm zM<CR>
augroup END

" shotcuts for location and quickfix windows
nmap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<CR>

" clean white space
nnoremap <silent> <leader>ss :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" git diff options
set diffopt=filler,vertical
set diffopt+=algorithm:patience

" terminal escape
tnoremap <Esc> <C-\><C-n>

set inccommand=split
" select just pasted text
nnoremap <silent> gp `[v`]

" vim-test
nmap <silent><leader>xt <leader>os:TestNearest<cr>
nmap <silent><leader>xf <leader>os:TestFile<cr>
nmap <silent><leader>xl <leader>os:TestLast<cr>
" Coc
" Some servers have issues with backup files
set nobackup
set nowritebackup

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" let g:copilot_no_tab_map = v:true
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ exists('b:_copilot.suggestions') ? copilot#Accept("\<CR>") :
      \ CheckBackSpace() ? "\<Tab>" :
      \ coc#refresh()

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * :echo("abc")
autocmd CursorHold * call CocActionAsync('highlight')
highlight CocHighlightText gui=NONE guifg=NONE guibg=#3D2806

nmap <silent>gd <Plug>(coc-definition)
nmap <silent>gy <Plug>(coc-type-definition)
nmap <leader>tf <Plug>(coc-codeaction)
nmap <leader>tc <Plug>(coc-fix-current)
"nmap <leader>tl <Plug>(coc-codelens-action)
nmap <leader>te <Plug>(coc-diagnostic-info)
nmap <leader>tg <Plug>(coc-declaration)
map <leader>tj <Plug>(coc-refactor)
nmap <leader>su <Plug>(coc-float-jump) :topleft sp<cr>:execute('resize ' . (line('$') + 2))<cr>
nmap ]g <Plug>(coc-diagnostic-next-error)
nmap [g <Plug>(coc-diagnostic-prev-error)
nmap ]w <Plug>(coc-diagnostic-next)
nmap [w <Plug>(coc-diagnostic-prev)

nmap <silent> <leader>tr <Plug>(coc-rename)
nmap <silent> <leader>ta <Plug>(coc-references)
nmap <silent> <leader>tt :call CocActionAsync('doHover')<cr>
nmap <silent> <leader>cc :CocCommand<cr>
nmap <silent> <leader>cq :CocCommand tsserver.restart<cr>

" nnoremap <silent> <leader>z :Prettier<cr>
nmap <silent> <leader>z <Plug>(coc-format)
"nnoremap <leader>z :CocCommand eslint.executeAutofix<cr>


nmap <silent> <leader>tl :CocList<cr>

command! -nargs=0 Prettier :CocCommand prettier.formatFile
nmap <silent> <leader>tp :Prettier<cr>

nmap <silent> <leader>td :CocDiagnostics<cr>
" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

nnoremap <silent> <leader>ts  :<C-u>CocList -I symbols<cr>

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
" nmap <silent> <TAB> <Plug>(coc-range-select)
vmap <silent> <TAB> <Plug>(coc-range-select)

nmap <silent><leader>tm <Plug>(coc-codeaction-selected)<cr>
xmap <silent><leader>tm <Plug>(coc-codeaction-selected)<cr>
xmap <silent><leader>tp <Plug>(coc-codeaction)<cr>

nnoremap <silent> <leader>ty  :<C-u>CocList -A --normal yank<cr>
xnoremap <silent> <leader>ty  :<C-u>CocList -A --normal yank<cr>

imap <tab> <Plug>(coc-snippets-expand-jump)

nnoremap <silent> <leader>to :CocCommand tsserver.organizeImports<cr>:CocCommand eslint.executeAutofix<cr>
nnoremap <silent> <leader>tw :CocCommand tsserver.watchBuild<cr>

augroup ctrl_m_definition
    autocmd!
    autocmd FileType typescript.tsx,typescriptreact,typescript,javascript,javascriptreact,javascript.tsx,rust,stylable,vim,haskell,proto nnoremap <buffer> <cr> <Plug>(coc-definition)
    autocmd FileType typescript.tsx,typescriptreact,typescript,javascript,javascript.tsx nnoremap <leader>z :CocCommand eslint.executeAutofix<cr>
augroup END

" nnoremap  <silent> <leader>* :execute 'Rg' '--fixed-strings' shellescape(expand("<cword>"))<CR>
" vnoremap <silent> <leader>* :<C-u>call VisualStarSearchSet('/', 'raw')<CR>:execute 'Rg' '--fixed-strings' "'" . @/ . "'"<CR>

" nnoremap  <leader>r :execute 'Grep' shellescape(expand("<cword>"))<CR>:execute 'cdo %s/' shellescape(expand("<cword>")) '/'
nnoremap <silent> <leader>r :RenameAll<cr>
" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
nnoremap <silent> c* :let @/='\<'.expand('<cword>').'\>'<CR>cgn
xnoremap <silent> c* "sy:let @/=@s<CR>cgn

" :h tcsh-style
cnoremap <C-A> <Home>
" cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
" alt-b
cnoremap <Char-0x1B>b <S-Left>
cnoremap <Esc>f <S-Right>

" Allow passing optional flags into the Rg command.
"   Example: :Rg myterm -g '*.md'
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \ "rg --column --line-number --no-heading --color=always --smart-case " .
  \ <q-args>, 1, fzf#vim#with_preview(), <bang>0)

" tmux
let g:tmux_navigator_disable_when_zoomed = 1

packadd cfilter

source ~/.vim/scripts/fzf_js_import.vim
source ~/.vim/scripts/toggle_list.vim
source ~/.vim/scripts/open_split.vim
source ~/.vim/scripts/grep_operator.vim
source ~/.vim/scripts/git.vim
source ~/.vim/scripts/grep.vim
source ~/.vim/scripts/replace.vim
source ~/.vim/scripts/goyo.vim
source ~/.vim/scripts/tree_surfer.vim
source ~/.vim/scripts/execute-package-script.vim

set noswapfile

nnoremap <silent> <leader>dd :TestNearest -strategy=jest<CR>
function! JestStrategy(cmd)
  let testName = matchlist(a:cmd, '\v -t ''(.*)''')[1]
  let fileName = matchlist(a:cmd, '\v'' -- (.*)$')[1]
  call luaeval("require'debugHelper'.debugJest([[" . testName . "]], [[" . fileName . "]])")
endfunction
let g:test#custom_strategies = {'jest': function('JestStrategy')}

hi clear SpellBad
hi SpellBad cterm=underline

augroup JsonToJsonc
    autocmd! FileType json set filetype=jsonc
augroup END

nnoremap <silent> yog :Goyo<CR>
nnoremap <silent> yol :Limelight!!<CR>

let g:test#javascript#runner = "jest"
let g:test#javascript#jest#executable="yarn test"
" let g:test#javascript#jest#executable="yarn jest"

nnoremap <silent><leader>n :Neotree reveal<cr>

set title
set titlestring=%{hostname()}\ \ %F\ \ %{strftime('%Y-%m-%d\ %H:%M',getftime(expand('%')))}

" fix gbrowse when because netrw is disabled: https://vi.stackexchange.com/questions/38447/vim-fugitive-netrw-not-found-define-your-own-browse-to-use-gbrowse
:command! -nargs=1 Browse silent execute '!open' shellescape(<q-args>,1)

lua <<EOF

require('whichKey')
require("winbar")

-- PLUGIN CONFIGURATION

-- require('plugins/marks');
require('plugins/oil');
require('plugins/live-command');

require('plugins/neo-tree')
-- require('plugins/aerial')
require('plugins/github-theme')
-- require('plugins/sad')
-- require('plugins/neotest');
require('plugins/diffview');

require('plugins/ufo')
require('plugins/dressing')
require("plugins/chatgpt")
require('plugins/obsidian')
require("plugins/grub-far")
require("fugitive")
require("substitute").setup()

require("typerelax")
require("copilot").setup({
  suggestion = {
    enabled = true,
    auto_trigger = true,
    keymap = {
      accept = "<TAB>",
      accept_word = false,
      accept_line = false,
      next = "<C-]>",
      -- prev = "<C-[>",
      -- dismiss = "<C-]>",
    },
  }
})

require("CopilotChat").setup {
  debug = true, -- Enable debugging
  -- See Configuration section for rest
}
require('bunTest')

require('plugins/avante')
require('plugins/render-markdown')

require("icon-picker").setup({ disable_legacy_commands = true })

EOF

" hls colors
highlight Search ctermbg=black ctermfg=yellow cterm=underline guibg=yellow

let g:EnhancedJumps_no_mappings = 1
" Alt-o
nmap <A-o> <Plug>EnhancedJumpsRemoteOlder
" Alt-i
nmap <A-i> <Plug>EnhancedJumpsRemoteNewer

" Leader keys: 
" q - quickfix list
" w - free
" e - open fzf :Files
" r - replcase is in project
" y - FREE
:command! CopyBuffer let @+ = join([expand('%:p'),  line(".")], ':')
nnoremap <silent> <leader>y :CopyBuffer<CR>
" u - AI
nnoremap <leader>uu :ChatGPT<CR>
xnoremap <leader>uv :lua require'chatgpt'.edit_with_instructions()<CR>
" i - insert group

" p - paste yanked
nnoremap <silent> <leader>p "0p
nnoremap <silent> <leader>P "0P
" a - aerial
" s - splits
" d - debuger
" f - coc fzf - unused
" g - Git
" h - hunks
" j - FREE
" k - FREE
" l - nohls
" z - Format
" x - execute (tests)
nmap <silent><leader>xb <leader>os:terminal cd $(dirname %); yarn build<CR>

nmap <silent><leader>xp :BunTest<CR>
nmap <silent><leader>xo :BunTestOnly<CR>
" c - FREE
" v - vim source/open etc
" b - Fzf Buffers:
" n - obsidian
" m - FREE

hi CocInfoHighlight gui=undercurl guisp=#6bc46d

hi CocSpellBad cterm=underline gui=underline ctermfg=Green guifg=Green

inoremap <C-,> <BS>
inoremap <C-b> <BS>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-q': 'fill_quickfix'}

" for some broken monorepos
let g:editorconfig = v:false

" vim-multi
let g:VM_leader = '\'
let maplocalleader = ","

autocmd FileType proto setlocal commentstring=//\ %s
