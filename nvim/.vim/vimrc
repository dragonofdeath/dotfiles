" ============================================================================
" Vim-plug initialization
" http://fisadev.github.io/fisa-vim-config/

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" Plugins ---------------------------------------{{{

call plug#begin('~/.vim/plugged')

Plug 'projekt0n/github-nvim-theme', { 'tag': 'v0.0.7' }
" Plug 'folke/noice.nvim'
Plug 'ray-x/sad.nvim'
Plug 'ray-x/guihua.lua'

Plug 'dyng/ctrlsf.vim'

Plug 'christianchiarulli/nvcode-color-schemes.vim'

Plug 'amadeus/vim-mjml'
Plug 'smjonas/live-command.nvim',
Plug 'nvim-lua/plenary.nvim',
Plug 'MunifTanjim/nui.nvim',
Plug 'nvim-neo-tree/neo-tree.nvim', { 'branch': 'v2.x' }

Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'nvim-treesitter/playground'
Plug 'stevearc/aerial.nvim'

Plug 'lewis6991/spellsitter.nvim'
Plug 'github/copilot.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'ziontee113/syntax-tree-surfer'
Plug 'brooth/far.vim'

"Plug 'liuchengxu/vim-which-key'
Plug 'sindrets/diffview.nvim'
Plug 'kyazdani42/nvim-web-devicons'

Plug 'https://github.com/morhetz/gruvbox.git'
Plug 'ericbn/vim-solarized'
Plug 'ulwlu/elly.vim'
Plug 'cormacrelf/vim-colors-github'
Plug 'ayu-theme/ayu-vim'

Plug 'tpope/vim-commentary'
Plug 'suy/vim-context-commentstring' " needed for vim-commentary
Plug 'meain/vim-package-info', { 'do': 'npm install' }
Plug 'haya14busa/is.vim'
Plug 'bronson/vim-visual-star-search'

Plug 'https://github.com/edkolev/tmuxline.vim.git'
Plug 'https://github.com/MarcWeber/vim-addon-mw-utils.git'
Plug 'https://github.com/vim-airline/vim-airline.git'

" git
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'
Plug 'https://github.com/airblade/vim-gitgutter.git'
Plug 'rhysd/git-messenger.vim'

" tpope classics
Plug 'https://github.com/tpope/vim-repeat.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/tpope/vim-sleuth.git'
Plug 'https://github.com/tpope/vim-unimpaired.git'
" Plug 'tpope/vim-vinegar'
" Plug 'justinmk/vim-dirvish'
" Plug 'roginfarrer/vim-dirvish-dovish'

Plug 'justinmk/vim-sneak'

Plug 'https://github.com/christoomey/vim-tmux-navigator.git'

Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

Plug 'andys8/vim-elm-syntax'

Plug 'mfussenegger/nvim-dap'

Plug 'andymass/vim-visput'
set signcolumn=number
let g:coc_global_extensions = [
\ 'coc-json',
\ 'coc-tsserver',
\ 'coc-eslint',
\ 'coc-html',
\ 'coc-css',
\ 'coc-yaml',
\ 'coc-highlight',
\ 'coc-rust-analyzer',
\ 'coc-vimlsp',
\ 'coc-snippets',
\ 'coc-react-refactor',
\ 'coc-yank',
\ 'coc-lists',
\ 'coc-fzf-preview',
\ 'coc-protobuf',
\ 'coc-spell-checker',
\ 'coc-sh',
\ ]
" \ 'coc-tabnine',

Plug 'machakann/vim-highlightedyank'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

Plug 'wellle/targets.vim'

" Scratch buffer
Plug 'mtth/scratch.vim'

Plug 'vimwiki/vimwiki'

Plug 'janko/vim-test'

Plug 'nvim-treesitter/nvim-treesitter'
Plug 'jxnblk/vim-mdx-js'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-symbols.nvim'

call plug#end()

nnoremap <silent> <leader> :WhichKey ' '<CR>
" ============================================================================
" Install plugins the first time vim runs

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif

" ============================================================================
autocmd FileType gitcommit setlocal spell

" Basic options ----------------------------------------{{{
set nocompatible

syntax on
filetype plugin indent on

" leader mapping
let mapleader = ' '

" make backspace work like most other programs
set backspace=2
set history=200

"set keyword for temporatry higlite switch off
set hls
set incsearch

set number
" set relativenumber
set mouse=a
set autoindent
set nowrap

set expandtab
set shiftwidth=2

set list          " Display unprintable characters f12 - switches
set listchars=tab:•\ ,trail:•,extends:»,precedes:« " Unprintable chars mapping

set foldmethod=syntax
set foldlevel=20

"" ========== Theme ==========
" colorscheme github_dimmed
set termguicolors
" colorscheme elly
" set background=dark
" hi User1 guifg=#3D424D
" hi ModeMsg guifg=#3D424D
" hi DiffAdd gui=NONE guifg=NONE guibg=#012800
" hi DiffText gui=NONE guifg=NONE guibg=#012800
" hi DiffChange gui=NONE guifg=NONE guibg=#5D4826
" hi DiffDelete gui=bold guifg=#340001 guibg=#340001

" " hi Error guifg=#Ad7576

" hi ErrorMsg guifg=#Ad7576
" hi WarningMsg guifg=#9b9257

" hi CocErrorSign guifg=#Ad7576
" hi CocWarningSign guifg=#9b9257
" hi CocInfoSign guifg=#9b9257
" hi CocHintSign guifg=#7997a6

" cursor
" let &t_SI = "\e[9 q"
" let &t_EI = "\e[9 q"

" Optionally reset the cursor on start:
augroup myCmds
au!
autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END

" For VimGutter
set updatetime=400
" }}}

" allow close unsaved buffer
set hidden

" Mappings ----------------------------------------{{{
nnoremap <silent> <leader>l :<C-u>nohlsearch<CR>
cnoremap <silent> <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" let g:airline_inactive_collapse=1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_extensions = ['tmuxline', 'netrw', 'quickfix', 'coc']
let g:airline_theme='elly'
" let g:airline#extensions#coc#enabled = 1

" Save with treesitter reset
nnoremap <silent> <S-s> :write \| edit \| TSBufEnable highlight<CR>
" <Command-S> is bound to <M--> in alacritty config
nnoremap <silent> <M--> :write \| edit \| TSBufEnable highlight<CR>

" use system clipboard
set clipboard+=unnamedplus

" the rg search on grep
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --hidden\ --glob\ \"!**/.git/**\"
set grepformat=%f:%l:%c:%m,%f:%l:%m

" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case --hidden -- '.shellescape(<q-args>), 1,
"   \   fzf#vim#with_preview(), <bang>0)

" command! -bang -nargs=* Rg
"       call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case --hidden --glob !**/.git/**" . <q-args>, 1, fzf#vim#with_preview(), <bang>0)
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case --hidden\ --glob\ \"!**/.git/**\ -- '.shellescape(<q-args>), 1,
"   \   fzf#vim#with_preview(), <bang>0)

noremap <S-h> ^
noremap <S-l> $
noremap <C-6> :e#

" system config editing
nnoremap <silent> <leader>vs :so $MYVIMRC<cr>
nnoremap <silent> <leader>vo :vsp $MYVIMRC<cr>
nnoremap <silent> <leader>ve :vsp ~/.vim/vimrc<cr>
nnoremap <silent> <leader>vn :CocCommand snippets.editSnippets<cr>
nnoremap <silent> <leader>vd :vsp ~/dotfiles/<cr>
nnoremap <silent> <leader>vi :PlugInstall<cr>

let $FZF_DEFAULT_COMMAND = 'fd -H -E .git'
" let $FZF_DEFAULT_COMMAND = 'fd -H -E .git --type file'
nnoremap <silent> <leader>e :Files<cr>
nnoremap <silent> <leader>b :Buffers<cr>
nnoremap <silent> <leader>/ :BLines<cr>
nnoremap <silent> <leader>h :History<cr>
nnoremap <silent> <leader>H :Helptags<cr>
" nnoremap <leader>: :Commands<cr>

let g:fzf_preview_command = 'bat --color=always --plain {-1}'
let g:fzf_preview_filelist_command = 'fd -H -E .git'
" https://www.reddit.com/r/vim/comments/kaedj9/implemented_fzfpreviewvim_with_gitdelta_in_vim/
let g:fzf_preview_git_status_preview_command = "git diff --color=always -- {-1}"
    "\ "[[ $(git diff --cached -- {-1}) != \"\" ]] && git diff --cached --color=always -- {-1} | delta || " .
    "\ "[[ $(git diff -- {-1}) != \"\" ]] && git diff --color=always -- {-1} "
    "\ g:fzf_preview_command

let g:fzf_preview_fzf_preview_window_option = 'up:60%'

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
let g:fzf_preview_window = ['up:70%', 'ctrl-/']

" nnoremap <leader>e :<C-u>CocCommand fzf-preview.DirectoryFiles<CR>
nnoremap <silent> <Leader>fp     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
nnoremap <silent> <Leader>fgs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
nnoremap <silent> <Leader>fga    :<C-u>CocCommand fzf-preview.GitActions<CR>
nnoremap <silent> <Leader>fb     :<C-u>CocCommand fzf-preview.Buffers<CR>
nnoremap <silent> <Leader>fB     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
nnoremap <silent> <Leader>fo     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
nnoremap <silent> <Leader>f<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
nnoremap <silent> <Leader>fg;    :<C-u>CocCommand fzf-preview.Changes<CR>
nnoremap <silent> <Leader>f/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
nnoremap <silent> <Leader>f*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
nnoremap <silent> <Leader>fgr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
xnoremap <silent> <Leader>fgr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
nnoremap <silent> <Leader>ft     :<C-u>CocCommand fzf-preview.BufferTags<CR>
nnoremap <silent> <Leader>fq     :<C-u>CocCommand fzf-preview.QuickFix<CR>
nnoremap <silent> <Leader>fl     :<C-u>CocCommand fzf-preview.LocationList<CR>

nnoremap <silent> <leader>gg :GFiles?<cr>

nnoremap <silent> tc :tabc<cr>

" some abbreviations
iabbrev lenght length

" default split position
set splitright
set splitbelow

noremap <silent> Q :q<cr>

" splits
noremap <silent> <leader>sh :call OpenSplit('h')<cr>
noremap <silent> <leader>sl :call OpenSplit('l')<cr>
noremap <silent> <leader>sk :call OpenSplit('k')<cr>
noremap <silent> <leader>sj :call OpenSplit('j')<cr>
noremap <silent> <leader>sfh :call OpenSplit('h')<cr>gf
noremap <silent> <leader>sfl :call OpenSplit('l')<cr>gf
noremap <silent> <leader>sfk :call OpenSplit('k')<cr>gf
noremap <silent> <leader>sfj :call OpenSplit('j')<cr>gf
noremap <silent> <leader>sth :call OpenSplit('h')<cr>:term<cr>i
noremap <silent> <leader>stl :call OpenSplit('l')<cr>:term<cr>i
noremap <silent> <leader>stk :call OpenSplit('k')<cr>:term<cr>i
noremap <silent> <leader>stj :call OpenSplit('j')<cr>:term<cr>i
noremap <silent> <leader>srh :call OpenSplit('h')<cr>:e.<cr>
noremap <silent> <leader>srl :call OpenSplit('l')<cr>:e.<cr>
noremap <silent> <leader>srk :call OpenSplit('k')<cr>:e.<cr>
noremap <silent> <leader>srj :call OpenSplit('j')<cr>:e.<cr>

nnoremap <silent> <leader>id :read !date -u +"\%Y-\%m-\%d \%A"<cr>
nnoremap <silent> <leader>iw :read !date +"Week \%U"<cr>

" Make Y behave more like other operators.
nnoremap <silent> Y y$

" Save cursor position for reopening.
au BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif

set nospell
set ignorecase
set smartcase
set scrolljump=5                " lines to scroll when cursor leaves screen
set scrolloff=3                 " minimum lines to keep above and below cursor
set gdefault                    " the /g flag on :s substitutions
set tabstop=4

" fugitive
noremap <silent> <leader>gb :Git blame<CR>
noremap <silent> <leader>gs :Git<CR>
nnoremap <silent> <leader>gd :DiffviewOpen<CR>
nnoremap <silent> <leader>gdh :diffget //2<CR>
nnoremap <silent> <leader>gdl :diffget //3<CR>
noremap <silent> <leader>ge :Gedit<CR>
noremap <silent> <leader>gl :0Gclog!<CR>
noremap <silent> <leader>gc :Git commit<CR>
noremap <silent> <leader>gw :Gwrite<CR>
noremap <silent> <leader>gpf :Git push --forse<CR>
noremap <silent> <leader>gpb :Git pub<CR>

nnoremap <expr> <Leader>gr ':!gh pr view -w '.expand('<cword>').'<cr>'

augroup filetype_git
    autocmd!
    autocmd FileType git :norm zM<CR>
augroup END

" shotcuts for location and quickfix windows
nmap <silent> <leader>w :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<CR>

" clean white space
nnoremap <silent> <leader>ss :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" git diff options
set diffopt=filler,vertical
set diffopt+=algorithm:patience

" terminal escape
tnoremap <Esc> <C-\><C-n>

set inccommand=split
" select just pasted text
nnoremap <silent> gp `[v`]

" hls colors
" highlight Search ctermbg=black ctermfg=yellow cterm=underline

" augroup BgHighlight
"     autocmd!
"     autocmd WinEnter * set cursorline
"     autocmd WinEnter * set cursorcolumn
"     autocmd WinLeave * set nocursorline
"     autocmd WinLeave * set nocursorcolumn
" augroup END

" refactor expression to var
" nnoremap <leader>r ".pIconst <esc>A = <esc>""p=`]`]A;<esc>

" vim-test
nmap <silent><leader>xt :TestNearest<cr>
nmap <silent><leader>xf :TestFile<cr>
nmap <silent><leader>xl :TestLast<cr>
" Coc
" Some servers have issues with backup files
set nobackup
set nowritebackup

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * :echo("abc")
autocmd CursorHold * call CocActionAsync('highlight')
highlight CocHighlightText gui=NONE guifg=NONE guibg=#3D2806

nmap <silent>gd <Plug>(coc-definition)
nmap <silent>gy <Plug>(coc-type-definition)
nmap <leader>tf <Plug>(coc-codeaction)
nmap <leader>tc <Plug>(coc-fix-current)
"nmap <leader>tl <Plug>(coc-codelens-action)
nmap <leader>te <Plug>(coc-diagnostic-info)
nmap <leader>tg <Plug>(coc-declaration)
map <leader>tj <Plug>(coc-refactor)
nmap <leader>su <Plug>(coc-float-jump) :topleft sp<cr>:execute('resize ' . (line('$') + 2))<cr>
nmap ]g <Plug>(coc-diagnostic-next-error)
nmap [g <Plug>(coc-diagnostic-prev-error)

nmap <silent> <leader>tr <Plug>(coc-rename)
nmap <silent> <leader>ta <Plug>(coc-references)
nmap <silent> <leader>tt :call CocAction('doHover')<cr>

" nnoremap <silent> <leader>z :Prettier<cr>
nmap <silent> <leader>z <Plug>(coc-format)
"nnoremap <leader>z :CocCommand eslint.executeAutofix<cr>


nmap <silent> <leader>tl :CocList<cr>

command! -nargs=0 Prettier :CocCommand prettier.formatFile
nmap <silent> <leader>tp :Prettier<cr>

nmap <silent> <leader>td :CocDiagnostics<cr>
" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

nnoremap <silent> <leader>ts  :<C-u>CocList -I symbols<cr>

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
" nmap <silent> <TAB> <Plug>(coc-range-select)
vmap <silent> <TAB> <Plug>(coc-range-select)

nmap <silent><leader>tm <Plug>(coc-codeaction-selected)<cr>
xmap <silent><leader>tm <Plug>(coc-codeaction-selected)<cr>
xmap <silent><leader>tp <Plug>(coc-codeaction)<cr>

nnoremap <silent> <leader>ty  :<C-u>CocList -A --normal yank<cr>
xnoremap <silent> <leader>ty  :<C-u>CocList -A --normal yank<cr>

imap <tab> <Plug>(coc-snippets-expand-jump)

nnoremap <silent> <leader>to :CocCommand tsserver.organizeImports<cr>:CocCommand eslint.executeAutofix<cr>
nnoremap <silent> <leader>tw :CocCommand tsserver.watchBuild<cr>

augroup ctrl_m_definition
    autocmd!
    autocmd FileType typescript.tsx,typescriptreact,typescript,javascript,javascriptreact,javascript.tsx,rust,stylable,vim,haskell,proto nnoremap <buffer> <cr> <Plug>(coc-definition)
    autocmd FileType typescript.tsx,typescriptreact,typescript,javascript,javascript.tsx nnoremap <leader>z :CocCommand eslint.executeAutofix<cr>
    autocmd BufWrite * :echom "Writing buffer!"
augroup END
"replace the word under cursor
" nnoremap <leader>* :%s/\<<c-r><c-w>\>//g<left><left>
" TODO work on visual mode: xnoremap <leader>* :<C-u>%s/\<<c-r><c-w>\>//g<left><left>

" use ag for recursive searching so we don't find 10,000 useless hits inside node_modules
"nnoremap <leader>* :call ag#Ag('grep', '--literal ' . shellescape(expand("<cword>")))<CR>
" vnoremap <leader>* :<C-u>call VisualStarSearchSet('/', 'raw')<CR>:call ag#Ag('grep', '--literal ' . shellescape(@/))<CR>

nnoremap  <silent> <leader>* :execute 'Rg' '--fixed-strings' shellescape(expand("<cword>"))<CR>
vnoremap <silent> <leader>* :<C-u>call VisualStarSearchSet('/', 'raw')<CR>:execute 'Rg' '--fixed-strings' "'" . @/ . "'"<CR>

" nnoremap  <leader>r :execute 'Grep' shellescape(expand("<cword>"))<CR>:execute 'cdo %s/' shellescape(expand("<cword>")) '/'
nnoremap <silent> <leader>r :RenameAll<cr>
" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
nnoremap <silent> c* :let @/='\<'.expand('<cword>').'\>'<CR>cgn
xnoremap <silent> c* "sy:let @/=@s<CR>cgn

" :h tcsh-style
cnoremap <C-A> <Home>
" cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
" alt-b
cnoremap <Char-0x1B>b <S-Left>
cnoremap <Esc>f <S-Right>

" Allow passing optional flags into the Rg command.
"   Example: :Rg myterm -g '*.md'
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \ "rg --column --line-number --no-heading --color=always --smart-case " .
  \ <q-args>, 1, fzf#vim#with_preview(), <bang>0)

" tmux
let g:tmux_navigator_disable_when_zoomed = 1
" Solves netrw using <C-L><C-H> which is used for jumping windows
" https://github.com/christoomey/vim-tmux-navigator/issues/53
augroup navigator_netrw_fix
  autocmd!
  autocmd FileType netrw nmap <buffer> <silent> <c-l> :TmuxNavigateRight<cr>
augroup END

packadd cfilter

source ~/.vim/scripts/fzf_js_import.vim
source ~/.vim/scripts/toggle_list.vim
source ~/.vim/scripts/open_split.vim
source ~/.vim/scripts/grep_operator.vim
source ~/.vim/scripts/git.vim
source ~/.vim/scripts/grep.vim
source ~/.vim/scripts/replace.vim
source ~/.vim/scripts/goyo.vim
source ~/.vim/scripts/tree_surfer.vim
source ~/.vim/scripts/execute-package-script.vim
" source ~/.vim/scripts/theme.vim

nnoremap  <silent> <leader>gv :call git#git_diffview_commit()<CR>

"camellcase
nnoremap <silent> ,c viwgu:s/_\([a-z]\)/\u\1/g<CR>

nmap <Leader>- <Plug>VimwikiRemoveHeaderLevel

set noswapfile

" let g:dirvish_mode = ':sort ,^.*[\/],'

" mfussenegger/nvim-dap
lua << EOF
local dap = require('dap')
dap.adapters.node2 = {
  type = 'executable',
  command = 'node',
  args = {os.getenv('HOME') .. '/b/vscode-node-debug2/out/src/nodeDebug.js'},
}
vim.fn.sign_define('DapBreakpoint', {text='🟥', texthl='', linehl='', numhl=''})
vim.fn.sign_define('DapStopped', {text='🟢', texthl='', linehl='', numhl=''})
EOF
nnoremap <silent> <leader>dh :lua require'dap'.toggle_breakpoint()<CR>
" nnoremap <S-k> :lua require'dap'.step_out()<CR>
" nnoremap <S-l> :lua require'dap'.step_into()<CR>
" nnoremap <S-j> :lua require'dap'.step_over()<CR>
nnoremap <silent> <leader>dn :lua require'dap'.continue()<CR>
nnoremap <silent> <leader>d_ :lua require'dap'.run_last()<CR>
nnoremap <silent> <leader>dr :lua require'dap'.repl.open({}, 'vsplit')<CR><C-w>l
nnoremap <silent> <leader>di :lua require'dap.ui.variables'.hover(function () return vim.fn.expand("<cexpr>") end)<CR>
vnoremap <silent> <leader>di :lua require'dap.ui.variables'.visual_hover()<CR>
nnoremap <silent> <leader>d? :lua require'dap.ui.variables'.scopes()<CR>
nnoremap <silent> <leader>de :lua require'dap'.set_exception_breakpoints({"all"})<CR>
nnoremap <silent> <leader>da :lua require'debugHelper'.attach()<CR>


" jank/vim-test and mfussenegger/nvim-dap
nnoremap <silent> <leader>dd :TestNearest -strategy=jest<CR>
function! JestStrategy(cmd)
  let testName = matchlist(a:cmd, '\v -t ''(.*)''')[1]
  let fileName = matchlist(a:cmd, '\v'' -- (.*)$')[1]
  call luaeval("require'debugHelper'.debugJest([[" . testName . "]], [[" . fileName . "]])")
endfunction
let g:test#custom_strategies = {'jest': function('JestStrategy')}

" Used for <Plug>(dovish_delete)
" function! g:DovishDelete(target) abort
"   return 'rm ' . a:target
" endfunction
nnoremap <silent> - :Neotree filesystem reveal current<CR>


set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()

hi clear SpellBad
hi SpellBad cterm=underline

augroup JsonToJsonc
    autocmd! FileType json set filetype=jsonc
augroup END

nnoremap <silent> yog :Goyo<CR>
nnoremap <silent> yol :Limelight!!<CR>

let g:test#javascript#runner = "jest"
let g:test#javascript#jest#executable="yarn test:unit"
" let g:test#javascript#jest#executable="yarn jest"

nnoremap <silent> \ :Neotree reveal<cr>

set title
set titlestring=%{hostname()}\ \ %F\ \ %{strftime('%Y-%m-%d\ %H:%M',getftime(expand('%')))}

lua <<EOF
require("live-command").setup {
  commands = {
    Norm = { cmd = "norm" },
  },
}
require("neo-tree").setup({
  window = {
    mappings = {
      -- ["-"] = "navigate_up",
      ["[c"] = "prev_git_modified",
      ["]c"] = "next_git_modified",
    },
  },
  filesystem = {
    follow_current_file = true,
    group_empty_dirs = false,
    hijack_netrw_behavior = "open_current",
    window = {
      mappings = {
        -- disable fuzzy finder
        ["/"] = "noop"
      }
    },
    filtered_items = {
      visible = true, -- when true, they will just be displayed differently than normal items
    },
  },
})
require('aerial').setup({
  -- optionally use on_attach to set keymaps when aerial has attached to a buffer
  on_attach = function(bufnr)
    -- Jump forwards/backwards with '{' and '}'
    vim.keymap.set('n', '<C-p>', '<cmd>AerialPrev<CR>', {buffer = bufnr})
    vim.keymap.set('n', '<C-n>', '<cmd>AerialNext<CR>', {buffer = bufnr})
  end,
  layout = {
    -- These control the width of the aerial window.
    -- They can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
    -- min_width and max_width can be a list of mixed types.
    -- max_width = {40, 0.2} means "the lesser of 40 columns or 20% of total"
    max_width = { 50, 0.3 },
    width = nil,
    min_width = 20,

    -- key-value pairs of window-local options for aerial window (e.g. winhl)
    win_opts = { wrap = true },

    -- Determines the default direction to open the aerial window. The 'prefer'
    -- options will open the window in the other direction *if* there is a
    -- different buffer in the way of the preferred direction
    -- Enum: prefer_right, prefer_left, right, left, float
    default_direction = "prefer_left",

    -- Determines where the aerial window will be opened
    --   edge   - open aerial at the far right/left of the editor
    --   window - open aerial to the right/left of the current window
    placement = "window",

    -- Preserve window size equality with (:help CTRL-W_=)
    preserve_equality = false,
    },
})

require("github-theme").setup({
  theme_style = "dimmed",
  variable_style = "NONE",
  dark_float = true,
  colors = {
    syntax = {
      -- variable = '#00FF00',
      func = '#adbac7',
      constant = '#96d0ff',
      string = '#8ddb8c',
      variable = '#96d0ff',
    },
  }
})
-- require("noice").setup()
require("sad").setup({
  debug = false, -- print debug info
  diff = 'delta', -- you can use `less`, `diff-so-fancy`
  ls_file = 'fd', -- also git ls_file
  exact = false, -- exact match
  vsplit = false, -- split sad window the screen vertically, when set to number
  -- it is a threadhold when window is larger than the threshold sad will split vertically,
  height_ratio = 0.6, -- height ratio of sad window when split horizontally
  width_ratio = 0.6, -- height ratio of sad window when split vertically
})
-- You probably also want to set a keymap to toggle aerial
vim.keymap.set('n', '<leader>a', '<cmd>AerialToggle!<CR>')
EOF
" Leader keys: 
" q - quickfix list
" w - vimwiki group
" e - open fzf :Files
" r - replcase is in project
" y - FREE
" u - FREE
" i - insert group
" o - open package/monorepo level files
nnoremap <silent> <leader>oe :execute "edit " . system('find-package-root ' . expand('%:p')) . '/.env' <CR>
nnoremap <silent> <leader>op :execute "edit " . system('find-package-root ' . expand('%:p')) . '/package.json' <CR>
nnoremap <silent> <leader>ot :execute "edit " . system('find-package-root ' . expand('%:p')) . '/tsconfig.json' <CR>
nnoremap <silent> <leader>on :execute "edit " . system('find-package-root ' . expand('%:p')) . '/node_modules' <CR>
nnoremap <leader>os :execute "cd " . system('find-package-root ' . expand('%:p'))<CR>:pwd<CR>
nnoremap <leader>ox :call ExecutePackageScript(system('find-package-root ' . expand('%:p')))<CR>

nnoremap <silent> <leader>ooe :execute "edit " . system('find-monorepo-root ' . expand('%:p')) . '/.env' <CR>
nnoremap <silent> <leader>oop :execute "edit " . system('find-monorepo-root ' . expand('%:p')) . '/package.json' <CR>
nnoremap <silent> <leader>oot :execute "edit " . system('find-monorepo-root ' . expand('%:p')) . '/tsconfig.json' <CR>
nnoremap <silent> <leader>oon :execute "edit " . system('find-monorepo-root ' . expand('%:p')) . '/node_modules' <CR>
nnoremap <leader>oos :execute "cd " . system('find-monorepo-root ' . expand('%:p'))<CR>:pwd<CR>
nnoremap <leader>oox :call ExecutePackageScript(system('find-monorepo-root ' . expand('%:p')))<CR>

" p - paste yanked
nnoremap <silent> <leader>p "0p
nnoremap <silent> <leader>P "0P
" a - aerial
" s - splits
" d - debuger
" f - coc fzf - unused
" g - Git
" h - hunks
" j - FREE
" k - FREE
" l - nohls
" z - Format
" x - execute (tests)
nnoremap <silent> <leader>xb :terminal cd $(dirname %); yarn build<CR>
" c - FREE
" v - vim source/open etc
" b - Fzf Buffers:
" n - FREE
" m - FREE

hi CocInfoHighlight gui=undercurl guisp=red
